---
- hosts: bonchvisors
  remote_user: cephadmin
  become: true
  become_user: root
  become_method: sudo

  tasks:

#  - name: install openstack nova compute elements
#    yum:
#     name: "{{ packages }}"
#     state: latest
#    vars:
#     packages:
#     - openstack-neutron-linuxbridge
#     - ebtables
#     - ipset
#     - openstack-nova-compute
#     - openstack-neutron-ml2
#     - openstack-neutron-openvswitch


#  - name: restart openvswitch services
#    systemd:
#     state: restarted
#     enabled: yes
#     daemon_reload: yes
#     name: openvswitch.service

  - name: get public ip address
    shell: echo 172.17.2.$((50+$(echo $HOSTNAME | awk -F "bonchvisor" '{print $2}' | sed 's/^0*//')))
    args:
     executable: /bin/bash
    register: public_ip

  - name: get private ip address
    shell: echo 172.17.3.$((50+$(echo $HOSTNAME | awk -F "bonchvisor" '{print $2}' | sed 's/^0*//')))
    args:
     executable: /bin/bash
    register: private_ip

  - name: get first interface name
    shell: "ip a | grep enp | awk 'NR==1{print $2}' | tr -d :"
    args:
     executable: /bin/bash
    register: firstport

  - name: get second interface name
    shell: "ip a | grep enp | awk 'NR==2{print $2}' | tr -d :"
    args:
     executable: /bin/bash
    register: secondport

  - name: collect old ifcfg-files
    shell: ls /etc/sysconfig/network-scripts/ | grep ifcfg | grep -v 'ifcfg-lo\|ifcfg-ens1f0\|ens1f1' | awk '{print $1}'
    args:
     executable: /bin/bash
    register: oldint

  - name: delete old interface files
    file:
     state: absent
     path: /etc/sysconfig/network-scripts/{{ item }}
    loop: "{{oldint.stdout_lines}}"
    when: oldint.stdout != ""

  - name: cretae ifcfg-{{ firstport.stdout }} network config file
    template:
     src: /etc/ansible/files/networks/ifcfg-physicalif01
     dest: /etc/sysconfig/network-scripts/ifcfg-{{ firstport.stdout }}
     owner: root
     group: root
     mode: 0644    

  - name: cretae ifcfg-{{ secondport.stdout }} network config file
    template:
     src: /etc/ansible/files/networks/ifcfg-physicalif02
     dest: /etc/sysconfig/network-scripts/ifcfg-{{ secondport.stdout }}
     owner: root
     group: root
     mode: 0644

  - name: cretae bond0 network config file
    template:
     src: /etc/ansible/files/networks/ifcfg-bond0
     dest: /etc/sysconfig/network-scripts/ifcfg-bond0
     owner: root
     group: root
     mode: 0644

  - name: cretae main bridge network config file
    template:
     src: /etc/ansible/files/networks/ifcfg-main-bridge
     dest: /etc/sysconfig/network-scripts/ifcfg-ovs-main
     owner: root
     group: root
     mode: 0644

  - name: cretae mgmt0 network config file
    template:
     src: /etc/ansible/files/networks/ifcfg-mgmt0
     dest: /etc/sysconfig/network-scripts/ifcfg-mgmt0
     owner: root
     group: root
     mode: 0644

  - name: create main bridge network config file
    template:
     src: /etc/ansible/files/networks/ifcfg-port-int
     dest: /etc/sysconfig/network-scripts/ifcfg-port-int
     owner: root
     group: root
     mode: 0644

  - name: create patchpanel network config file
    template:
     src: /etc/ansible/files/networks/ifcfg-ovs-patch0
     dest: /etc/sysconfig/network-scripts/ifcfg-ovs-patch0
     owner: root
     group: root
     mode: 0644

  - name: create neutron config file
    template:
     src: /etc/ansible/files/openvswitch_agent.ini
     dest: /etc/neutron/plugins/ml2/openvswitch_agent.ini
     owner: root
     group: root
     mode: 0644

#slave bridge creation



  - name: create ovs-slave bridge
    shell: ovs-vsctl --may-exist add-br ovs-slave && ovs-vsctl set int ovs-slave mtu_request=9000
    args:
     executable: /bin/bash

  - name: create management bridge
    shell: ovs-vsctl --may-exist add-br br-mgmt ovs-slave 162 && ovs-vsctl set int br-mgmt mtu_request=9000
    args:
     executable: /bin/bash

  - name: create internal bridge
    shell: ovs-vsctl --may-exist add-br br-ic ovs-slave 163 && ovs-vsctl set int br-ic mtu_request=9000
    args:
     executable: /bin/bash

  - name: create first external bridge
    shell: ovs-vsctl --may-exist add-br br-ext01 ovs-slave 160 && ovs-vsctl set int br-ext01 mtu_request=9000
    args:
     executable: /bin/bash

  - name: create second external bridge
    shell: ovs-vsctl --may-exist add-br br-ext02 ovs-slave 165 && ovs-vsctl set int br-ext02 mtu_request=9000
    args:
     executable: /bin/bash

  - name: create patchport to ovs-main
    shell: ovs-vsctl --may-exist add-port ovs-slave patch1 && ovs-vsctl set int patch1 mtu_request=9000
    args:
     executable: /bin/bash

  - name: connect patchport to ovs-main
    shell: ovs-vsctl set interface patch1 type=patch options:peer=patch0
    args:
     executable: /bin/bash

  - name: restart network services
    shell: ls /etc/sysconfig/network-scripts/ | grep ifcfg | grep -v 'ifcfg-lo\|ifcfg-ens1f0\|ens1f1\|enp' | awk '{print $1}' | sed 's/ifcfg-//g'| while read line; do ip link set dev $line down && ip link delete $line; done && systemctl restart network; systemctl restart network
    args:
     executable: /bin/bash

  - name: restart neutron-openvswitch
    systemd:
     state: restarted
     enabled: yes
     daemon_reload: yes
     name: neutron-openvswitch-agent.service

# postconfig

  - name: set physical interface MTU
    shell: ovs-vsctl set int {{ firstport.stdout }} mtu_request=9000 && ovs-vsctl set int {{ secondport.stdout }} mtu_request=9000
    args:
     executable: /bin/bash
